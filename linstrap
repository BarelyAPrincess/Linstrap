#!/usr/bin/env -S bash
##############################################################################
##  This software may be modified and distributed under the terms
##  of the MIT license.  See the LICENSE file for details.
##
##  Unless required by applicable law or agreed to in writing,
##  software distributed under the License is distributed on an
##  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
##  KIND, either express or implied.  See the License for the
##  specific language governing permissions and limitations
##  under the License.
##
##  Copyright (c) 2021 Amelia Sara Greene <barelyaprincess@gmail.com>
##  Copyright (c) 2021 Penoaks Publishing LLC <development@penoaks.com>
##
##  Linstrap JVM Bootstrap script for UN*X
##############################################################################

if [ "$0" == "*bash" ]; then
    /usr/bin/env -S bash `realpath $0`
    return $?
fi

yes() {
    [ $1 ] && eval "$1=0" || echo -n 0
}

no() {
    [ $1 ] && eval "$1=1" || echo -n 1
}

is() {
    [ $1 ] && eval "CV=\${$1}" || CV=$1
    [ "$CV" == "0" ] || return 1
}

sterilize_bool() {
    eval "CV=\${$1}"
    case $CV in
        "1"|"yes"|"true")
            EV=$(yes)
            ;;
        "0"|"no"|"false"|"")
            EV=$(no)
            ;;
        *)
            # Is there a way to prevent this from executing malicious code?
            eval "$CV &>/dev/null"
            EV="$?"
            ;;
    esac

    [ $1 ] && eval "$1=\"$EV\"" || return $EV
}

echo() {
  if [ $# -eq 0 ]; then
    builtin echo
  else
    OPTIONS="-e"
    VAR=""
    eval set -- "$(getopt -n "echo" -o neE --long version --long help -- "$@")"
    while :; do
      if [ "$1" == "--help" ]; then
        builtin echo --help
        exit $?
      elif [ "$1" == "--version" ]; then
        builtin echo --version
        exit $?
      elif [ "$1" == "--" ]; then
        shift
        VAR="$*"
        break;
      else
        OPTIONS="$OPTIONS $1"
      fi
      shift
    done

    if [ "$(LC_ALL=C type -t parse_color)" == "function" ]; then
      VAR="$(parse_color "$VAR")"
    else
      VAR="${VAR//[&@][0-9A-Za-z]/}"
    fi

    builtin echo $OPTIONS "$VAR"
  fi
}

last_arg() {
  for i; do :; done
  builtin echo -ne $i
}

is_builtin() {
    [ "$(LC_ALL=C type -t ${1})" == "builtin" ]
}

join_by() { local d="$1"; shift; local f="$1"; shift; printf %s "$f" "${@/#/$d}"; }

crash() {
    echo "&4$@"
    exit 1
}

sterilize_bool USE_COLOR

case "$TERM" in
    xterm-color|*-256color) USE_COLOR=$(yes);;
esac

# Check if setting the color causes an error
if [ $USE_COLOR == "0" ] && ! tput setaf 1 >&/dev/null; then
    USE_COLOR=$(no)
fi

if [ $USE_COLOR == "0" ]; then
    [ $CODE_DEF ] || CODE_DEF="\e[96m"
    [ $CODE_GOOD ] || CODE_GOOD="\e[1;36m"
    [ $CODE_BLINK ] || CODE_BLINK="\e[5m"
    [ $CODE_ERROR ] || CODE_ERROR="\e[1;41;97m"
    [ $CODE_RESET ] || CODE_RESET="\e[39;0m"
fi

msg() {
    echo -e "$CODE_DEF $1 $CODE_RESET"
}

alignCenter() {
    LM=$((${2}/2-${#1}/2))
    RM=$LM
    [ $((${#1}%2)) == "1" ] && RM=$((RM-1))
    echo -en "`printf '%*s' $LM`$1`printf '%*s' $RM`"
}

error() {
    echo
    echo
    echo -e "        $CODE_ERROR ╔════════════════════════════════════════════════════════════════════╗ $CODE_RESET        ">&2
    echo -e "        $CODE_ERROR ║ $CODE_BLINK$(alignCenter "!!! ERROR ERROR ERROR ERROR !!!" "66";)$CODE_RESET$CODE_ERROR ║ $CODE_RESET        ">&2
    echo -e "        $CODE_ERROR ║                                                                    ║ $CODE_RESET        ">&2
    echo -e $1 | while read line; do
        echo -e "        $CODE_ERROR ║ $(alignCenter "$line" "66";) ║ $CODE_RESET        ">&2
    done
    echo -e "        $CODE_ERROR ╚════════════════════════════════════════════════════════════════════╝ $CODE_RESET        ">&2

    echo
    echo
    exit 1
}

# Attempt to set LINSTRAP_HOME
if [ $LINSTRAP_HOME ]; then
    VERIFY_MSG="The LINSTRAP_DIR variable points to an invalid target:\n\"`realpath $LINSTRAP_HOME`\"\nPlease verify this location and try again."
else
    # Resolve links: $0 may be a link
    PRG="$0"
    # Need this for relative symlinks.
    while [ -h "$PRG" ] ; do
        ls=`ls -ld "$PRG"`
        link=`expr "$ls" : '.*-> \(.*\)$'`
        if expr "$link" : '/.*' > /dev/null; then
            PRG="$link"
        else
            PRG=`dirname "$PRG"`"/$link"
        fi
    done
    SAVED="`pwd`"
    cd "`dirname \"$PRG\"`/" >/dev/null
    LINSTRAP_HOME="`pwd -P`"
    cd "$SAVED" >/dev/null

    VERIFY_MSG="The Linstrap home directory was auto detected as:\n\"$LINSTRAP_HOME\"\nPlease verify that the script is located in the real root directory\nor you can manually set the directory with the LINSTRAP_HOME veriable."
fi

[ -d "$LINSTRAP_HOME" ] || error "The Linstrap home directory does not exist!\n\n$VERIFY_MSG"

[ -f "$LINSTRAP_HOME/.env" ] || error "We can not find the .env file located in the LINSTRAP_HOME!\n\n$VERIFY_MSG"

# Load Linstrap environment file
. $LINSTRAP_HOME/.env && SUCCESS="yes" || error "We failed to load the .env file located in the LINSTRAP_HOME!\n\n$VERIFY_MSG"

msg ""
msg "                                                                       "
msg "  ██▓     ██▓ ███▄    █   ██████ ▄▄▄█████▓ ██▀███   ▄▄▄       ██▓███   "
msg " ▓██▒    ▓██▒ ██ ▀█   █ ▒██    ▒ ▓  ██▒ ▓▒▓██ ▒ ██▒▒████▄    ▓██░  ██▒ "
msg " ▒██░    ▒██▒▓██  ▀█ ██▒░ ▓██▄   ▒ ▓██░ ▒░▓██ ░▄█ ▒▒██  ▀█▄  ▓██░ ██▓▒ "
msg " ▒██░    ░██░▓██▒  ▐▌██▒  ▒   ██▒░ ▓██▓ ░ ▒██▀▀█▄  ░██▄▄▄▄██ ▒██▄█▓▒ ▒ "
msg " ░██████▒░██░▒██░   ▓██░▒██████▒▒  ▒██▒ ░ ░██▓ ▒██▒ ▓█   ▓██▒▒██▒ ░  ░ "
msg " ░ ▒░▓  ░░▓  ░ ▒░   ▒ ▒ ▒ ▒▓▒ ▒ ░  ▒ ░░   ░ ▒▓ ░▒▓░ ▒▒   ▓▒█░▒▓▒░ ░  ░ "
msg " ░ ░ ▒  ░ ▒ ░░ ░░   ░ ▒░░ ░▒  ░ ░    ░      ░▒ ░ ▒░  ▒   ▒▒ ░░▒ ░      "
msg "   ░ ░    ▒ ░   ░   ░ ░ ░  ░  ░    ░        ░░   ░   ░   ▒   ░░        "
msg "     ░  ░ ░           ░       ░              ░           ░  ░          "
msg "                                                                       "
msg " ╔════════════════════════════════════════════════════════════════════╗ "
msg " ║ $CODE_GOOD$(alignCenter "Welcome to the Linux System Bootstraper Utility v1.0" "66";)$CODE_RESET ║"
msg " ║ $CODE_GOOD$(alignCenter "Created by Amelia S. Greene (BarelyAPrincess)" "66";)$CODE_RESET ║"
msg " ╚════════════════════════════════════════════════════════════════════╝ "

# Arg 1 is the project name
PROJECT=${1:-HoneyPotLinux}
LINSTRAP_BUILD_ROOT=${LINSTRAP_HOME}/build/${PROJECT}/root

source ${LINSTRAP_HOME}/scripts/mainmenu
exit 0
