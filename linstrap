#!/bin/bash -eE
#
##############################################################################
##  This software may be modified and distributed under the terms
##  of the MIT license.  See the LICENSE file for details.
##
##  Unless required by applicable law or agreed to in writing,
##  software distributed under the License is distributed on an
##  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
##  KIND, either express or implied.  See the License for the
##  specific language governing permissions and limitations
##  under the License.
##
##  Copyright (c) 2021 Amelia Sara Greene <barelyaprincess@gmail.com>
##  Copyright (c) 2021 Penoaks Publishing LLC <development@penoaks.com>
##
##  Linstrap: Linux OS Bootstrapping and Launcher for UN*X
##############################################################################
#
# This is the entrypoint for the entire Linstrap setup utility.

EPOCH_START="$(date +%s)"
LC_ALL=${LC_ALL:-en_US.utf-8}
ENTRYPOINT_DIR="$(pwd)"

if [ "$0" == "*bash" ] || [ "$0" == "*sh" ]; then
  echo "Script must be ran from it's own bash process."
  return 1
fi

# This should never have to be manually set
APP_ROOT="${APP_ROOT:-$(dirname "$0" | xargs realpath)}"
APP_SRC="${APP_SRC:-${APP_ROOT}/src}"
if [ ! -d "${APP_ROOT}" ] || [ ! -d "${APP_SRC}" ]; then
  echo "Something went wrong and directories appear to be missing! {APP_ROOT=${APP_ROOT}}"
  exit 1
fi

# shellcheck source=./src/impl.pre.sh
. "${APP_SRC}/impl.pre.sh"

# shellcheck source=./src/impl.fontworks.sh
. "${APP_SRC}/impl.fontworks.sh"

# shellcheck source=./src/impl.functions.sh
. "${APP_SRC}/impl.functions.sh"

function cleanup() {
  cd "${ENTRYPOINT_DIR}"
  echo "Finished! Script ran for a total of $(($(date +%s)-EPOCH_START)) seconds."
}

trap crash ERR 2>/dev/null
trap cleanup EXIT KILL STOP 2>/dev/null
trap debug DEBUG RETURN 2>/dev/null

# shellcheck source=./src/impl.buffer.sh
. "${APP_SRC}/impl.buffer.sh"

# TODO Create a text based visual interaction alternative
# shellcheck source=./src/impl.interaction_visual.sh
. "${APP_SRC}/impl.interaction_visual.sh"

# shellcheck source=./src/impl.env.sh
. "${APP_SRC}/impl.env.sh"

# shellcheck source=./src/impl.header.sh
. "${APP_SRC}/impl.header.sh"

# [[ "$(type show_header)" =~ function ]] && show_header

#debug "Loading Menu Configuration"
# shellcheck source=./src/menus.conf.sh
. "${APP_SRC}/menus.conf.sh"

echo "Checking Linstrap Environment..."

# TODO Check if root and subdirs are writable

# Should exist as it contains source files for creating projects
makedir ROOT DATA "Data"

# Might not exist as it contains cache files for apt and others
makedir ROOT CACHE "Cache"

# Might not exist as it contains the projects
makedir ROOT PROJECTS "Projects"

echo -n "  Is host arch X86_64? "
[ "$(uname -m)" == "x86_64" ] || echo "nope! Only X86_64 is supported at this moment."
echo "yes!"

echo -n "  Running as root? "
[ "$(whoami)" == "root" ] || echo "nope! This script can only be ran as root at this moment."
echo "yes!"

echo

is_verbose && set -x

### Temporary To Access Functions ###
LINSTRAP_FUNCTION=${1:-}
case "${LINSTRAP_FUNCTION,,}" in
  "project_new")
    runScript "newProjectWizard"
    ;;
  "rescue_create")
    runScript "createRescueSystem"
    ;;
  "menu")
    runScript "gotoMainMenu" || error "We're sorry but the menu is not available at this moment!"
    ;;
  "")
    error "Please provide a function for Linstrap."
    ;;
  *)
    error "The function provided is invalid. {FUNCTION=\"${LINSTRAP_FUNCTION}\"}"
    ;;
esac

# XXX Temporary until menu can be made fully functional
exit 0

menuClear

function newProjectWizard() {
  runScript "newProjectWizard"
}

menuAddOption "New Project Wizard" "newProjectWizard"

function openProject() {
  runScript "openProject"
}

menuAddOption "Open Project" "openProject"

updateLinstrap() {
    git -C "${LINSTRAP_ROOT}" pull 2>&1 | dialog --programbox "Update Linstrap" "${DIALOG_HEIGHT}" "${DIALOG_WIDTH}"
}

menuAddOption "Update Linstrap" "updateLinstrap"

function showRainbow() {
  runScript tasteRainbow
}

menuAddOption "Taste the Rainbow" "showRainbow"

function showHelp() {
  runScript showHelp
}

menuAddOption "Help" "showHelp"

while :; do
  menuShow # || error "Something Went Wrong!" "Quitting"
done

exit 0
