#!/bin/bash -eE
#
##############################################################################
##  This software may be modified and distributed under the terms
##  of the MIT license.  See the LICENSE file for details.
##
##  Unless required by applicable law or agreed to in writing,
##  software distributed under the License is distributed on an
##  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
##  KIND, either express or implied.  See the License for the
##  specific language governing permissions and limitations
##  under the License.
##
##  Copyright (c) 2021 Amelia Sara Greene <barelyaprincess@gmail.com>
##  Copyright (c) 2021 Penoaks Publishing LLC <development@penoaks.com>
##
##  Linstrap: Linux OS Bootstrapping and Launcher for UN*X
##############################################################################
#
# This is the entrypoint for the entire Linstrap setup utility.

EPOCH_START="$(date +%s)"
LC_ALL=${LC_ALL:-en_US.utf-8}

if [ "$0" == "*bash" ] || [ "$0" == "*sh" ]; then
  echo "Script must be ran from it's own bash process."
  return 1
fi

# This should never have to be manually set
APP_ROOT="${APP_ROOT:-$(dirname "$0" | xargs realpath)}"
APP_SRC="${APP_SRC:-${APP_ROOT}/src}"
if [ ! -d "${APP_ROOT}" ] || [ ! -d "${APP_SRC}" ]; then
  echo "Something went wrong and directories appear to be missing! {APP_ROOT=${APP_ROOT}}"
  exit 1
fi

# shellcheck source=./src/linstrap.functions.sh
. "${APP_SRC}/linstrap.functions.sh"

function cleanup() {
  echo "Finished! Script ran for a total of $(($(date +%s) - $EPOCH_START)) seconds."
}

trap crash ERR
trap cleanup EXIT KILL
trap debug DEBUG RETURN

# shellcheck source=./src/linstrap.fontworks.sh
. "${APP_SRC}/linstrap.fontworks.sh"

# shellcheck source=./src/linstrap.env.sh
. "${APP_SRC}/linstrap.env.sh"

# shellcheck source=./src/linstrap.header.sh
. "${APP_SRC}/linstrap.header.sh"

[ "$(type -t show_header)" == "function" ] && show_header

msg "Checking Linstrap Environment..."

checkdir SRC MODULES "modules"

msg "  Is host arch X86_64? "
[ "$(uname -m)" == "x86_64" ] || echo "nope! Only X86_64 is supported at this moment."
echo "yes!"

msg "  Running as root? "
[ "$(whoami)" == "root" ] || echo "nope! This script can only be ran as root at this moment."
echo "yes!"



exit 0
















LINSTRAP_CONFIG_VALUES=$LINSTRAP_BUILD/values.conf
LINSTRAP_CONFIG_DEFAULTS=$LINSTRAP_BUILD/defaults.conf

if [ ! -f "$LINSTRAP_CONFIG_VALUES" ]; then
	PROMPT_DEFAULT="n"
	if ! prompt_yes_no "There is no configuration file, shall we create it?"; then
		error "Can't continue without the configuration file. Bailing out."
	fi

	# Empty config file
	builtin echo "" > $LINSTRAP_CONFIG_VALUES

	run_module entrypoint interviewer
fi

source "$LINSTRAP_CONFIG_VALUES" || error "Failed to retrive the build configuration files."

echo


function error() {
  echo "SEVERE ERROR! $* ${LINSTRAP_ERROR_APPEND}"
  exit 1
}

## Locate what directory we must use
if [ "$LINSTRAP_ROOT" ]; then
  LINSTRAP_ROOT=$(realpath "$LINSTRAP_ROOT")
  if [ -d "$LINSTRAP_ROOT" ]; then
    error "The LINSTRAP_ROOT variable points to an invalid target. Specified directory is \"$LINSTRAP_ROOT\"."
  fi
else
  # Resolve links: $0 may be a link
  PRG="$0"
  # Need this for relative symlinks.
  while [ -h "$PRG" ] ; do
    ls=$(ls -ld "$PRG")
    link=$(expr "$ls" : '.*-> \(.*\)$')
    if expr "$link" : '/.*' > /dev/null; then
      PRG="$link"
    else
      PRG=$(dirname "$PRG")"/$link"
    fi
  done
  SAVED="$(pwd)"
  cd "$(dirname \""$PRG"\")/" >/dev/null
  LINSTRAP_ROOT="$(pwd -P)"
  cd "$SAVED" >/dev/null
fi

# From here forward is the actual script code.



declare -lg PROMPT_NEXT=$([ -z "$1" ] && builtin echo -n "m" || builtin echo -n "q")
declare -lg PROMPT_RESULT=${1:-m}
PROMPT_RESULT=${PROMPT_RESULT:0:1}

while :; do
  PROMPT_DEFAULT="q"
  case "$PROMPT_RESULT" in
    q)
      msg "No errors, hooray! Goodbye!"
      exit 0
      ;;
    m)
      prompt_options_basic "Root menu: What would you like to do?" q Quit c Clean i Initrd k Kernel v Interviewer r "Taste Rainbow" h Help
      ;;
    v)
      run_module entrypoint interviewer
      PROMPT_RESULT=$PROMPT_NEXT
      ;;
    r)
      run_script rainbow $*
      PROMPT_RESULT=$PROMPT_NEXT
      ;;
    c)
      run_module entrypoint clean $*
      PROMPT_RESULT=$PROMPT_NEXT
      ;;
    i)
      run_script initrd $*
      PROMPT_RESULT=$PROMPT_NEXT
      ;;
    k)
      run_script kernel $*
      PROMPT_RESULT=$PROMPT_NEXT
      ;;
    h)
      run_script help $*
      PROMPT_RESULT=$PROMPT_NEXT
      ;;
    *)
      warningbox "That is not a valid option."
      ;;
  esac
done

exit 0
