#!/usr/bin/env -S bash
##############################################################################
##  This software may be modified and distributed under the terms
##  of the MIT license.  See the LICENSE file for details.
##
##  Unless required by applicable law or agreed to in writing,
##  software distributed under the License is distributed on an
##  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
##  KIND, either express or implied.  See the License for the
##  specific language governing permissions and limitations
##  under the License.
##
##  Copyright (c) 2021 Amelia Sara Greene <barelyaprincess@gmail.com>
##  Copyright (c) 2021 Penoaks Publishing LLC <development@penoaks.com>
##
##  Linstrap JVM Bootstrap script for UN*X
##############################################################################

if [ "$0" == "*bash" ]; then
    /usr/bin/env -S bash `realpath $0`
    return $?
fi

yes() {
    [ $1 ] && eval "$1=0" || echo -n 0
}

no() {
    [ $1 ] && eval "$1=1" || echo -n 1
}

is() {
    [ $1 ] && eval "CV=\${$1}" || CV=$1
    [ "$CV" == "0" ] || return 1
}

sterilize_bool() {
    eval "CV=\${$1}"
    case $CV in
        "1"|"yes"|"true")
            EV=$(yes)
            ;;
        "0"|"no"|"false"|"")
            EV=$(no)
            ;;
        *)
            # Is there a way to prevent this from executing malicious code?
            eval "$CV &>/dev/null"
            EV="$?"
            ;;
    esac

    [ $1 ] && eval "$1=\"$EV\"" || return $EV
}

sterilize_bool USE_COLOR

case "$TERM" in
    xterm-color|*-256color) USE_COLOR=$(yes);;
esac

# Check if setting the color causes an error
if [ $USE_COLOR == "0" ] && ! tput setaf 1 >&/dev/null; then
    USE_COLOR=$(no)
fi

if [ $USE_COLOR == "0" ]; then
    [ $CODE_DEF ] || CODE_DEF="\e[96m"
    [ $CODE_GOOD ] || CODE_GOOD="\e[1;36m"
    [ $CODE_BLINK ] || CODE_BLINK="\e[5m"
    [ $CODE_ERROR ] || CODE_ERROR="\e[1;41;97m"
    [ $CODE_RESET ] || CODE_RESET="\e[39;0m"
fi

msg() {
    echo -e "$CODE_DEF $1 $CODE_RESET"
}

alignCenter() {
    LM=$((${2}/2-${#1}/2))
    RM=$LM
    [ $((${#1}%2)) == "1" ] && RM=$((RM-1))
    echo -en "`printf '%*s' $LM`$1`printf '%*s' $RM`"
}

error() {
    echo
    echo
    echo -e "        $CODE_ERROR ╔════════════════════════════════════════════════════════════════════╗ $CODE_RESET        ">&2
    echo -e "        $CODE_ERROR ║ $CODE_BLINK$(alignCenter "!!! ERROR ERROR ERROR ERROR !!!" "66";)$CODE_RESET$CODE_ERROR ║ $CODE_RESET        ">&2
    echo -e "        $CODE_ERROR ║                                                                    ║ $CODE_RESET        ">&2
    echo -e $1 | while read line; do
        echo -e "        $CODE_ERROR ║ $(alignCenter "$line" "66";) ║ $CODE_RESET        ">&2
    done
    echo -e "        $CODE_ERROR ╚════════════════════════════════════════════════════════════════════╝ $CODE_RESET        ">&2

    echo
    echo
    exit 1
}

# Attempt to set LINSTRAP_HOME
if [ $LINSTRAP_HOME ]; then
    VERIFY_MSG="The LINSTRAP_DIR variable points to an invalid target:\n\"`realpath $LINSTRAP_HOME`\"\nPlease verify this location and try again."
else
    # Resolve links: $0 may be a link
    PRG="$0"
    # Need this for relative symlinks.
    while [ -h "$PRG" ] ; do
        ls=`ls -ld "$PRG"`
        link=`expr "$ls" : '.*-> \(.*\)$'`
        if expr "$link" : '/.*' > /dev/null; then
            PRG="$link"
        else
            PRG=`dirname "$PRG"`"/$link"
        fi
    done
    SAVED="`pwd`"
    cd "`dirname \"$PRG\"`/" >/dev/null
    LINSTRAP_HOME="`pwd -P`"
    cd "$SAVED" >/dev/null

    VERIFY_MSG="The Linstrap home directory was auto detected as:\n\"$LINSTRAP_HOME\"\nPlease verify that the script is located in the real root directory\nor you can manually set the directory with the LINSTRAP_HOME veriable."
fi

[ -d "$LINSTRAP_HOME" ] || error "The Linstrap home directory does not exist!\n\n$VERIFY_MSG"

[ -f "$LINSTRAP_HOME/.env" ] || error "We can not find the .env file located in the LINSTRAP_HOME!\n\n$VERIFY_MSG"

# Load Linstrap environment file
. $LINSTRAP_HOME/.env && SUCCESS="yes" || error "We failed to load the .env file located in the LINSTRAP_HOME!\n\n$VERIFY_MSG"

msg ""
msg "                                                                       "
msg "  ██▓     ██▓ ███▄    █   ██████ ▄▄▄█████▓ ██▀███   ▄▄▄       ██▓███   "
msg " ▓██▒    ▓██▒ ██ ▀█   █ ▒██    ▒ ▓  ██▒ ▓▒▓██ ▒ ██▒▒████▄    ▓██░  ██▒ "
msg " ▒██░    ▒██▒▓██  ▀█ ██▒░ ▓██▄   ▒ ▓██░ ▒░▓██ ░▄█ ▒▒██  ▀█▄  ▓██░ ██▓▒ "
msg " ▒██░    ░██░▓██▒  ▐▌██▒  ▒   ██▒░ ▓██▓ ░ ▒██▀▀█▄  ░██▄▄▄▄██ ▒██▄█▓▒ ▒ "
msg " ░██████▒░██░▒██░   ▓██░▒██████▒▒  ▒██▒ ░ ░██▓ ▒██▒ ▓█   ▓██▒▒██▒ ░  ░ "
msg " ░ ▒░▓  ░░▓  ░ ▒░   ▒ ▒ ▒ ▒▓▒ ▒ ░  ▒ ░░   ░ ▒▓ ░▒▓░ ▒▒   ▓▒█░▒▓▒░ ░  ░ "
msg " ░ ░ ▒  ░ ▒ ░░ ░░   ░ ▒░░ ░▒  ░ ░    ░      ░▒ ░ ▒░  ▒   ▒▒ ░░▒ ░      "
msg "   ░ ░    ▒ ░   ░   ░ ░ ░  ░  ░    ░        ░░   ░   ░   ▒   ░░        "
msg "     ░  ░ ░           ░       ░              ░           ░  ░          "
msg "                                                                       "
msg " ╔════════════════════════════════════════════════════════════════════╗ "
msg " ║ $CODE_GOOD$(alignCenter "Welcome to the Linux System Bootstraper Utility v1.0" "66";)$CODE_RESET ║"
msg " ║ $CODE_GOOD$(alignCenter "Created by Amelia S. Greene (BarelyAPrincess)" "66";)$CODE_RESET ║"
msg " ╚════════════════════════════════════════════════════════════════════╝ "

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS=""

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$LINSTRAP_HOME/bin/gradle.jar

# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        error "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || error "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin, switch paths to Windows format before running java
if $cygwin ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=$((i+1))
    done
    case $i in
        (0) set -- ;;
        (1) set -- "$args0" ;;
        (2) set -- "$args0" "$args1" ;;
        (3) set -- "$args0" "$args1" "$args2" ;;
        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

install -d cache

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=$(save "$@")

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=linstrap\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain \
    --gradle-user-home "\"$LINSTRAP_HOME/cache\"" \
    --project-cache-dir "\"$LINSTRAP_HOME/cache\"" \
    --settings-file "\"$LINSTRAP_HOME/data/settings.gradle\"" \
    --project-dir "\"$LINSTRAP_HOME/data\"" \
    "$APP_ARGS"

# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
  cd "$(dirname "$0")"
fi

exec "$JAVACMD" "$@"







#DO STUFF



echo
echo
exit 0
