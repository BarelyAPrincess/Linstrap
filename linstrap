#!/bin/bash
#
##############################################################################
##  This software may be modified and distributed under the terms
##  of the MIT license.  See the LICENSE file for details.
##
##  Unless required by applicable law or agreed to in writing,
##  software distributed under the License is distributed on an
##  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
##  KIND, either express or implied.  See the License for the
##  specific language governing permissions and limitations
##  under the License.
##
##  Copyright (c) 2021 Amelia Sara Greene <barelyaprincess@gmail.com>
##  Copyright (c) 2021 Penoaks Publishing LLC <development@penoaks.com>
##
##  Linstrap: Linux OS Bootstrapping and Launcher for UN*X
##############################################################################

## Prevent script from being source'd
if [ "$0" == "*bash" -o "$0" == "*sh" ]; then
    /usr/sbin/env bash `realpath $0`
    return $?
fi

## TODO Check the script is being executed with bash, sh will likely have compatibility issues.

## TODO Create a function that creates additional environment variables about the running process. (i.e. /proc/$$/status)

## Specifies what function will be executed
FUNCTION=${1:-launch}
shift

error() {
	echo "SEVERE ERROR! ${@}${LINSTRAP_ERROR_APPEND}"
	exit 1
}

## Initialize the directories
if [ $LINSTRAP_ROOT ]; then
	LINSTRAP_ROOT=$(realpath "$LINSTRAP_ROOT")
	if [ -d $LINSTRAP_ROOT ]; then
		error "The LINSTRAP_ROOT variable points to an invalid target. Specified directory is \"$LINSTRAP_ROOT\"."
    fi
else
    # Resolve links: $0 may be a link
    PRG="$0"
    # Need this for relative symlinks.
    while [ -h "$PRG" ] ; do
        ls=`ls -ld "$PRG"`
        link=`expr "$ls" : '.*-> \(.*\)$'`
        if expr "$link" : '/.*' > /dev/null; then
            PRG="$link"
        else
            PRG=`dirname "$PRG"`"/$link"
        fi
    done
    SAVED="`pwd`"
    cd "`dirname \"$PRG\"`/" >/dev/null
    LINSTRAP_ROOT="`pwd -P`"
    cd "$SAVED" >/dev/null
fi

LINSTRAP_DATA="$LINSTRAP_ROOT/data" # The base Linstrap files that are shared with the Linstraper Launcher.
LINSTRAP_BUILD="$LINSTRAP_ROOT/build" # Where system files will come together. Ignored by git.
LINSTRAP_OUT="$LINSTRAP_ROOT/out" # Packed images for booting will be kept here. Ignored by git.

check_dir() {
	if [ ! -d "$1" ]; then
		## TODO If something is missing, ask to create it?
		error "\nyes... :( The$2 directory \"$1\" does not exist!"
	fi
}

make_dirs() {
	local DIR CODE
	CODE=1
	for DIR in $*; do
		if [ -d "$DIR" ]; then
			mkdir -vp "$DIR" || exit 1
			CODE=0
		fi
	done
	return $CODE
}

include_script() {
	if [ -f "${LINSTRAP_DATA}/scripts/${1}" ]; then
		source "${LINSTRAP_DATA}/scripts/${1}"
	else
		error "The script \"${1}\" was not found in the scripts directory. $(var_dump LINSTRAP_SCRIPTS)"
	fi
}

## XXX /bin/sh does not have a declare? We seriously might want to see about using python, perl, or php instead of shell scripts.
declare -l FUNCTION ## Make lowercase

check_dir $LINSTRAP_ROOT " Linstrap root"

test -f ${LINSTRAP_ROOT}/.env && source ${LINSTRAP_ROOT}/.env

include_script "env"
include_script "func"

## Init Variables
[ $LINSTRAP_ERROR_APPEND ] || LINSTRAP_ERROR_APPEND="\n  Please consider providing feedback and/or contributing to this project at https://github.com/PenoaksDev/Linstrap"
[ $LINSTRAP_VERSION ] || LINSTRAP_VERSION="git$(git rev-parse --short HEAD 2>/dev/null)"
[ $LINSTRAP_TITLE ] || LINSTRAP_TITLE="Welcome to the Linux OS Bootstraping and Launcher Utility v$LINSTRAP_VERSION"
[ $LINSTRAP_AUTHOR ] || LINSTRAP_AUTHOR="Created by Amelia S. Greene (BarelyAPrincess)"
[ $WIDTH ] || WIDTH=88
[ $HEIGHT ] || HEIGHT=$(($WIDTH / 3))

startup() {
	include_script "header"

	echo "Checking Environment..."
	echo
	echo -n "  Is host arch X86_64? "
	ARCH=`uname -m`
	[ ${ARCH} == "x86_64" ] || error "Nope! Only X86_64 is supported at this moment."
	echo "Yes!"

	echo -n "  Running as root? "
	[ `whoami` == "root" ] || error "Nope! This script can only be ran as root at this moment due to its use of 'chroot'. Support for 'fakechroot' will be added later.$LINSTRAP_ERROR_APPEND"
	echo "Yes!"

	echo -n "  Is the data directories all accounted for? "
	check_dir "${LINSTRAP_DATA_ROOT}"
	make_dirs "${LINSTRAP_DATA}" "${LINSTRAP_DATA_OVERLAY}" "${LINSTRAP_DATA_WORKDIR}" && echo " Missing, but easily fixed!" || echo " Present!"

	echo -n "  Is the overlayfs mounted? "
	if [ "$(mount | grep -E "(.*(|lowerdir=|upperdir=|workdir=)${LINSTRAP_DATA}){4}")" == "" ]; then
		if [ "$(ls $LINSTRAP_DATA)" == "" ]; then
			error " Nope! WARNING: We detected that files exist in the directory!"
		else
			# error " Nope! Run \"$0 init\""
			mount -t overlay overlay -olowerdir=${LINSTRAP_DATA_ROOT},upperdir=${LINSTRAP_DATA_OVERLAY},workdir=${LINSTRAP_DATA_WORKDIR} ${LINSTRAP_DATA}
			echo " Nope, but we fixed it!"
		fi
	else
		echo " Yep!"
	fi

	echo -n "  Is all the expected environment variables set? "
	LINSTRAP_HOME=${LINSTRAP_HOME:-"$LINSTRAP_DATA/linstrap"}
	LINSTRAP_SCRIPTS=${LINSTRAP_SCRIPTS:-"$LINSTRAP_HOME/scripts"}
	LINSTRAP_BUILD=${LINSTRAP_BUILD:-"$LINSTRAP_ROOT/build"}

	check_var LINSTRAP_ROOT
	check_var LINSTRAP_DATA_ROOT
	check_var LINSTRAP_DATA_OVERLAY
	check_var LINSTRAP_DATA_WORKDIR
	check_var LINSTRAP_DATA
	check_var LINSTRAP_HOME
	check_var LINSTRAP_SCRIPTS
	check_var LINSTRAP_BUILD
	echo " Yes!"

	echo -n "  Is the home directory \"$LINSTRAP_HOME\" missing anything? "
	local TEMP="${LINSTRAP_DATA_ROOT}/linstrap"
	make_dirs "${TEMP}" "${TEMP}/scripts" "${TEMP}/menus" "${TEMP}/templates" && echo " Missing, but easily fixed!" || echo " Nada!"

	echo
}

launch() {
	for LOC in $(ls ${LINSTRAP_HOME}/scripts/chroot-pre-* 2>/dev/null); do
		test -f "$LOC" && source $LOC
	done

	## Add message that if the init system fails to launch, the suggestion to use git to reset can be presented.

	echo "Everything checks out! Now launching Linstrap chroot located at \"${LINSTRAP_DATA}\"..."
	echo
	$CHROOT "${LINSTRAP_DATA}" $1

	for LOC in $(ls ${LINSTRAP_HOME}/scripts/chroot-post-* 2>/dev/null); do
		test -f "$LOC" && source $LOC
	done
}

pack() {
	echo "Not Implemented"
}

test -f /sys/firmware/efi
BOOTED_WITH_EFI=$? # Zero means yes!



case $FUNCTION in
	"init" )
		startup

		# Detect dirty build
		[ "$(ls -A $LINSTRAP_BUILD)" ] && error "The build directory is dirty. We must have an empty directory to continue!"

		DEBOOTSTRAP_DIR="${LINSTRAP_BUILD}/debootstrap"
		[ -f "${DEBOOTSTRAP_DIR}/debootstrap" ] || error "The debootstrap binary is missing." # TODO Offer to download it!

		# ${DEBOOTSTRAP_DIR}/debootstrap --extractor=ar --variant empty --include="base-files,busybox-static,bash,dialog,fdisk,e2fsprogs,bsdutils,grep,sed,tar" --components="main,restricted,universe,multiverse" $@ focal ${DEBOOTSTRAP_DEST}
		## TODO Implement a type of file filter that looks for changes and prompts the user for input
		;;
	"pack" ) # Create an export bundle for booting Linstrap on any BIOS or EFI system.
		startup
		launch "/bin/env -i /linstrap/pack"
		;;
	"up" ) # Used to launch the Linstrap launcher on the local machine. Using QEMU by default, but using a chroot is a backup option.
		startup
		launch "/bin/env -i /linstrap/launch"
		;;
	"down" )
		startup
		launch "${1:-"/bin/env -i bash"}"
		;;
	"update" )
		startup
		echo "Updating Linstrap from GIT repository. Make sure GIT is installed."
		git pull
		;;
	"install" )
		## TODO Will copy self to an external thumb drive and optionally generate the initrd and grub config.
		error "Not Implemented"
		;;
	"help" | "usage" )
		echo "${0} [launch|chroot|pack|update|install|help] [options]"
		;;
	* )
		error "The function \"$FUNCTION\" is not recognized. The default function is 'launch' or try using the 'help' function for a list of accepted functions."
		;;
esac

exit 0
